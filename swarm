ec2: install docker: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html

Open up ports for docker swarm
2377: tcp for cluter management communications: anywhere
7946: tcp/udp for communication among nodes
4789: udp: for overlay network traffic

save. Then change anywhere to it's own security group: so open to other instances on same security group only.
http: 80
ssh 22


iptables -I INPUT 1 -p tcp --dport 2376 -j ACCEPT
iptables -I INPUT 1 -p tcp --dport 2377 -j ACCEPT
iptables -I INPUT 1 -p tcp --dport 7946 -j ACCEPT
iptables -I INPUT 1 -p udp --dport 7946 -j ACCEPT
iptables -I INPUT 1 -p udp --dport 4789 -j ACCEPT
service iptables save

login to all ec2 instances: 3 manager nodes, 2 workr nodes

copy docker-compose.yaml on 1 instance

docker network create -d overlay --subnet 192.168.10.0/24 n1 : 

networks:
   n1:
     ipam:
       config: 
         - subnet: 172.28.0.0/16

dockersamples/docker-swarm-visualizer

docker run -d -p 5000:8080 -v /var/run/docker.sock:/var/run/docker.sock dockersamples/visualizer
 docker run -it -d -p 5000:8080 -v /var/run/docker.sock:/var/run/docker.sock dockersamples/visualizer
 
 open up 5000 port for visualizer
 http://18.209.242.68:5000/: accessible at this link

For this ec2 instance, export 5000 port too.

docker stack deploy -c docker-compose.yaml stack1

To see all servcies: docker service ls

Services are resilient to failures compared to containers.

docker service logs -f app

docker swarm join-token manager
docker swarm join-token worker

docker node rm <node-id>

You can check container logs on the container only on which service is running.

docker does not distinguishes between healthy and non-healthy container. Hence should use EC2 load balancers,

We can access any ip address, due to docker swarm routing mesh, it would be navigated to proper container.

Can use hystrix to prevent failover.
If one container down, will automatically start

All micro-services should be running on one port to prevent confusion.
